import numpy as np
from RenderUtils import *
verts0 = np.array([
             #back
             [-0.5, -0.5, -0.5, 1],
             [-0.5,  0.5, -0.5, 1],
             [ 0.5,  0.5, -0.5, 1],
             [ 0.5, -0.5, -0.5, 1],
             #top
             [-0.5,  0.5, -0.5, 1],
             [ 0.5,  0.5, -0.5, 1],
             [-0.5,  0.5,  0.5, 1],
             [ 0.5,  0.5,  0.5, 1],
             #left
             [-0.5, -0.5, -0.5, 1],
             [-0.5,  0.5, -0.5, 1],
             [-0.5,  0.5,  0.5, 1],
             [-0.5, -0.5,  0.5, 1],
             #right
             [ 0.5, -0.5, -0.5, 1],
             [ 0.5, -0.5,  0.5, 1],
             [ 0.5,  0.5,  0.5, 1],
             [ 0.5,  0.5, -0.5, 1],
             #bottom
             [-0.5, -0.5, -0.5, 1],
             [ 0.5, -0.5, -0.5, 1],
             [ 0.5, -0.5,  0.5, 1],
             [-0.5, -0.5, 0.5, 1],
             #front
             [-0.5, -0.5,  0.5, 1],
             [-0.5,  0.5,  0.5, 1],
             [ 0.5,  0.5,  0.5, 1],
             [ 0.5, -0.5,  0.5, 1]])
indices0 = [
  [0, 1, 2], [0, 2, 3],
  [4, 5, 6], [6, 5, 7],
  [8, 9, 10], [8, 10, 11],
  [12, 13, 14],[12, 14, 15],
  [16, 17, 19],[19, 17, 18],
  [20, 21, 22],[20, 22, 23] 
]

colors0 = np.array([
      [0.5, 0, 0.2],
      [0.5, 0, 0.2],
      [0.5, 0, 0.2],
      [0.5, 0, 0.2],
      [0.2, 0.5, 0],
      [0.2, 0.5, 0],
      [0.2, 0.5, 0],
      [0.2, 0.5, 0],
      [0.1, 0.2, 0.6],
      [0.1, 0.2, 0.6],
      [0.1, 0.2, 0.6],
      [0.1, 0.2, 0.6],
      [0.6, 0.1, 0.4],
      [0.6, 0.1, 0.4],
      [0.6, 0.1, 0.4],
      [0.6, 0.1, 0.4],
      [0.25, 0.7, 0.1],
      [0.25, 0.7, 0.1],
      [0.25, 0.7, 0.1],
      [0.25, 0.7, 0.1],
      [0, 0.9, 0.5],
      [0, 0.9, 0.5],
      [0, 0.9, 0.5],
      [0, 0.9, 0.5],
    ])
verts1 = np.array([
  [-0.5, -0.5, -0.2, 1],
  [ 0.5, -0.5, -0.2, 1],
  [ 0.0,  0.8, 0, 1]
])
indices1 = [[0, 1, 2]]
colors1 = [
  [1, 0, 0],
  [0, 1, 0],
  [0, 0, 1]
]

pyramid_vertices = np.array([
  #front left
  [-0.5, -0.5,  0.0, 1], 
  [ 0.0, -0.2,  0.8, 1],
  [ 0.0,  0.5,  0.4, 1],
  #front right
  [ 0.0, -0.2,  0.8, 1],
  [ 0.5, -0.5,  0.0, 1],
  [ 0.0,  0.5,  0.4, 1],
  #back
  [ 0.5, -0.5,  0.0, 1],
  [-0.5, -0.5,  0.0, 1],
  [ 0.0,  0.5,  0.4, 1],
  #bottom
  [-0.5, -0.5,  0.0, 1],
  [ 0.5, -0.5,  0.0, 1],
  [ 0.0, -0.2,  0.8, 1],
])

pyramid_indices = [
  [0,  1,  2],
  [3,  4,  5],
  [6,  7,  8],
  [9, 10, 11],
]
pyramid_colors = np.array([
  [1, 0, 0],
  [1, 0, 0],
  [1, 0, 0],
  [0, 1, 0],
  [0, 1, 0],
  [0, 1, 0],
  [0, 0, 1],
  [0, 0, 1],
  [0, 0, 1],
  [1, 1, 1],
  [1, 1, 1],
  [1, 1, 1],
])

pyramid_normals = np.array([
  [-0.86020834, -0.25300245, -0.44275429],
  [-1.03081620e-16, -3.71390676e-01, 9.28476691e-01],
  [-1.29941776e-16, 9.36329178e-01, -3.51123442e-01],
  [-1.03081620e-16, -3.71390676e-01, 9.28476691e-01],
  [ 0.86020834, -0.25300245, -0.44275429],
  [-1.29941776e-16, 9.36329178e-01, -3.51123442e-01],
  [ 0.86020834, -0.25300245, -0.44275429],
  [-0.86020834, -0.25300245, -0.44275429],
  [-1.29941776e-16, 9.36329178e-01, -3.51123442e-01],
  [-0.86020834, -0.25300245, -0.44275429],
  [ 0.86020834, -0.25300245, -0.44275429],
  [-1.03081620e-16, -3.71390676e-01, 9.28476691e-01]
])

tNormals = np.array([
  [-0.86020834, 0.25300245, 0.44275429],
  [-0.86020834, 0.25300245, 0.44275429],
  [-0.86020834, 0.25300245, 0.44275429],
  [0.86020834, 0.25300245, 0.44275429],
  [0.86020834, 0.25300245, 0.44275429],
  [0.86020834, 0.25300245, 0.44275429],
  [ 0.          ,0.37139068, -0.92847669],
  [ 0.          ,0.37139068, -0.92847669],
  [ 0.          ,0.37139068, -0.92847669],
  [ 0.         ,-0.93632918,  0.35112344],
  [ 0.         ,-0.93632918,  0.35112344],
  [ 0.         ,-0.93632918,  0.35112344]
])

class Light:
  def __init__(self):
    self.ambient_strength = 0.1
    self.light_pos = [100, 0, 3.0]
    self.light_color = np.array([0, 0, 1])
  def AmbientFactor(self):
    return self.ambient_strength
  def DiffuseFactor(self, frag_normal, frag_pos):
    light_dir = frag_pos - self.light_pos
    diff = max(0.0, np.dot(NormolizeVector(frag_normal).T[0], NormolizeVector(light_dir.tolist()).T[0]))
    return min(1, diff + self.ambient_strength)
    




if __name__ == '__main__':
  # vertex 0
  v = pyramid_vertices
  n = []
  #front left
  n.append(np.cross((v[1][:3] - v[0][:3]), (v[2][:3] - v[0][:3])))
  #front right
  n.append(np.cross((v[4][:3] - v[1][:3]), (v[5][:3] - v[1][:3])))
  #back
  n.append(np.cross((v[2][:3] - v[0][:3]), (v[4][:3] - v[0][:3])))
  #bottom
  n.append(np.cross((v[4][:3] - v[0][:3]), (v[1][:3] - v[0][:3])))
  #normal 0 7 9
  n0 = NormolizeVector(n[0]+n[2]+n[3])
  #normal 1 3 11
  n1 = NormolizeVector(n[0]+n[1]+n[3])
  #normal 2 5 8
  n2 = NormolizeVector(n[0]+n[1]+n[2])
  #normal 4 6 10
  n3 = NormolizeVector(n[1]+n[2]+n[3])
  
  print(n0.T, n1.T, n2.T, n3.T, sep='\n')
  
